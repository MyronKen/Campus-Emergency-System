# test_data_insertion.py

import mysql.connector
from cryptography.fernet import Fernet
from datetime import datetime

# --- Database Connection ---
DB_HOST = "localhost"
DB_USER = "root"
DB_PASSWORD = "Qwerty@55"  
DB_NAME = "emergency_system1"

# --- Use the same encryption key from setup, or a new one for this test ---
try:
    key_string = b'-OVOxhYB4JwuD7YYVVjhvPITiHOPTWXmaMaQ39XJkyI=' 
    cipher = Fernet(key_string)
except (ValueError, TypeError):
    print("Error: Invalid encryption key. Please provide the key generated by db_setup.py")
    exit()


try:
    # --- Connect to the database ---
    db = mysql.connector.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )
    cursor = db.cursor()
    print("Successfully connected to the database for data insertion.")

    # --- Insert a sample user ---
    
    try:
        cursor.execute(
            "INSERT INTO users (username, role) VALUES (%s, %s)",
            ("testuser", "student")
        )
        user_id = cursor.lastrowid
        print(f"Sample user 'testuser' inserted with ID: {user_id}")
    except mysql.connector.IntegrityError:
        print("User 'testuser' already exists. Fetching existing user ID.")
        cursor.execute("SELECT id FROM users WHERE username = 'testuser'")
        user_id = cursor.fetchone()[0]


    # --- Encrypt and insert a sample alert ---
    location_data = "40.7128,-74.0060".encode()
    encrypted_location = cipher.encrypt(location_data)

    cursor.execute(
        "INSERT INTO alerts (user_id, emergency_type, location, timestamp) VALUES (%s, %s, %s, %s)",
        (user_id, "Medical", encrypted_location, datetime.now())
    )
    print("Sample alert inserted for 'testuser'.")

    # --- Commit changes and close connection ---
    db.commit()
    print("Sample data successfully inserted and committed.")


except mysql.connector.Error as err:
    print(f"Error: {err}")

finally:
    if 'db' in locals() and db.is_connected():
        cursor.close()
        db.close()
        print("MySQL connection is closed.")
